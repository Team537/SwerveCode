#include "Thing.h"
#include "Schematic.h"
#include "cmath"
#include "WPILib.h"

void Thing::init(void){
	FrontLeftAngle.Disable();
	AFR.Set(.25);
	static bool bFirstTime = true;
	inittimer.Start();
	FLPot.GetVoltage();
	if (inittimer.Get() >= 4){
		inittimer.Stop();
		AFL.Set(0);
		bFirstTime = false;
		FrontLeftAngle.Enable();
	}
	SmartDashboard::PutNumber("timer", inittimer.Get());
	double FLpotfeedback = FRPot.GetValue();
	if (FLpotfeedback >= FLpotfeedbackmax){
		FLpotfeedbackmax = FLpotfeedback;
		}
	if (FLpotfeedback <= FLPotfeedbackmin){
		FLPotfeedbackmin = FLpotfeedback;
		}
	SmartDashboard::PutNumber("FLmax", FLpotfeedbackmax);
	SmartDashboard::PutNumber("FLmin", FLPotfeedbackmin);
	SmartDashboard::PutNumber("Potval", FLpotfeedback);
	SmartDashboard::PutNumber("FLPot volts", FLPot.GetVoltage());
}

void Thing::SetVariables(float Magnitude, float DirectionRadians, float Twist){
	
	if (fabs(Magnitude) <= deadband){
		Magnitude = 0;
	}
	if (fabs(DirectionRadians) <= deadbandrad){
			DirectionRadians = 0;
	}
	if (fabs(Twist) <= deadband){
			Twist = 0;
	}
	SmartDashboard::PutNumber("Test", 16);
	A = (cos(DirectionRadians)*Magnitude)-(Twist*LENGTH/2);
	B = (cos(DirectionRadians)*Magnitude)+(Twist*LENGTH/2);
	C = (sin(DirectionRadians)*Magnitude)-(Twist*WIDTH/2);
	D = (sin(DirectionRadians)*Magnitude)+(Twist*WIDTH/2);
	SmartDashboard::PutNumber("Test2", 537);
	SmartDashboard::PutNumber("A", A);
	SmartDashboard::PutNumber("B", B);
	SmartDashboard::PutNumber("C", C);
	SmartDashboard::PutNumber("D", D);
	SmartDashboard::PutNumber("Test3", 538);
	
}

void Thing::Ramping() {
	Sort();
	frontlspeed = LEFT_DRIVE_DIRECTION * frontlspeed;
	frontrspeed = RIGHT_DRIVE_DIRECTION *frontrspeed;
	backlspeed = LEFT_DRIVE_DIRECTION * backlspeed;
	backrspeed = RIGHT_DRIVE_DIRECTION * backrspeed;
	frontldif = frontlspeed - FrontLeftOldSpeed;
	frontrdif = frontrspeed - FrontRightOldSpeed;
	backldif = backlspeed - BackLeftOldSpeed;
	backrdif = backrspeed - BackRightOldSpeed;
	if (fabs(frontldif) >= RAMP_SPEED) {
		FrontLeftOldSpeed += RAMP_SPEED * Sign(frontldif);
	}
	if (fabs(frontrdif) >= RAMP_SPEED) {
		FrontRightOldSpeed += RAMP_SPEED * Sign(frontrdif);
	}
	if (fabs(backldif) >= RAMP_SPEED) {
		BackLeftOldSpeed += RAMP_SPEED * Sign(backldif);
	}
	if (fabs(backrdif) >= RAMP_SPEED) {
		BackRightOldSpeed += RAMP_SPEED * Sign(backrdif);
	}
	if (frontlspeed == 0) {
		FrontLeftOldSpeed = 0;
	}
	if (frontrdif == 0) {
		FrontRightOldSpeed = 0;
	}
	if (frontlspeed == 0) {
		BackLeftOldSpeed = 0;
	}
	if (frontrdif == 0) {
		BackRightOldSpeed = 0;
	}
}
float Thing::Sign(float InputSign) {
	if (InputSign > 0) {
		return 1;
	}
	if (InputSign < 0) {
		return -1;
	}
	return 0;
}

void Thing::Setpoint()
{

	FrontRightAngle.Enable();
	if (trigger == 1){
		FrontRightAngle.SetSetpoint(500);
	}
	else
		FrontRightAngle.SetSetpoint(150);

	SmartDashboard::PutNumber("Front Right input", FRPot.PIDGet());
	SmartDashboard::PutNumber("Front Right output", AFR.Get());
	SmartDashboard::PutNumber("Front Right Error", FrontRightAngle.GetError());
	SmartDashboard::PutNumber("Front Right input 2", FRPot.PIDGet());
	SmartDashboard::PutNumber("Front Right output 2", AFR.Get());
	SmartDashboard::PutNumber("Front Right Error 2", FrontRightAngle.GetError());
	SmartDashboard::PutNumber("setpoint", FrontRightAngle.GetSetpoint());
	SmartDashboard::PutBoolean("PID Target", FrontRightAngle.OnTarget());
	SmartDashboard::PutNumber("FLPot volts", FRPot.GetVoltage());
}

void Thing::JoystickAngle(float dirictionrad, float mag)
{
	if (fabs(mag) >= .2)
	  drad = dirictionrad+180;
	
}

void Thing::SetAngle(){
	FrontRightAngle.Enable();
	FrontRightAngle.SetSetpoint(((drad)*(FRRANGE)/360)-FRMIN);
	FrontLeftAngle.Enable();
	FrontLeftAngle.SetSetpoint(((drad)*(FLRANGE)/360)-FLMIN);
	/*BackRightAngle.Enable();
	BackRightAngle.SetSetpoint(BRAng);
	BackLeftAngle.Enable();
	BackLeftAngle.SetSetpoint(BLAng);*/
	if (FrontRightAngle.OnTarget())
		AFR.Set(0);
	if (FrontLeftAngle.OnTarget())
		AFL.Set(0);
	if (BackRightAngle.OnTarget())
		ABR.Set(0);
	if (BackLeftAngle.OnTarget())
		ABL.Set(0);
	SmartDashboard::PutNumber("Front Right input", FLPot.PIDGet());
	SmartDashboard::PutNumber("Front Right output", AFL.Get());
	SmartDashboard::PutNumber("Front Right Error", FrontLeftAngle.GetError());
	SmartDashboard::PutNumber("Front Right input 2", FLPot.PIDGet());
	SmartDashboard::PutNumber("Front Right output 2", AFL.Get());
	SmartDashboard::PutNumber("Front Right Error 2", FrontLeftAngle.GetError());
	SmartDashboard::PutNumber("setpoint", FrontLeftAngle.GetSetpoint());
	SmartDashboard::PutBoolean("PID Target", FrontLeftAngle.OnTarget());
	SmartDashboard::PutNumber("FLPot volts", FLPot.GetVoltage());
}
