#include "Thing.h"
#include "Schematic.h"
#include "cmath"
#include "WPILib.h"

void Thing::init(void){
	FrontLeftAngle.Disable();
	AFR.Set(.25);
	static bool bFirstTime = true;
	inittimer.Start();
	FLPot.GetVoltage();
	if (inittimer.Get() >= 4){
		inittimer.Stop();
		AFL.Set(0);
		bFirstTime = false;
		FrontLeftAngle.Enable();
	}
	SmartDashboard::PutNumber("timer", inittimer.Get());
	double FLpotfeedback = FRPot.GetValue();
	if (FLpotfeedback >= FLpotfeedbackmax){
		FLpotfeedbackmax = FLpotfeedback;
		}
	if (FLpotfeedback <= FLPotfeedbackmin){
		FLPotfeedbackmin = FLpotfeedback;
		}
	SmartDashboard::PutNumber("FLmax", FLpotfeedbackmax);
	SmartDashboard::PutNumber("FLmin", FLPotfeedbackmin);
	SmartDashboard::PutNumber("Potval", FLpotfeedback);
	SmartDashboard::PutNumber("FLPot volts", FLPot.GetVoltage());
}

void Thing::SetVariables(float Magnitude, float DirectionRadians, float Twist){
	
	if (fabs(Magnitude) <= deadband){
		Magnitude = 0;
	}
	if (fabs(DirectionRadians) <= deadbandrad){
			DirectionRadians = 0;
	}
	if (fabs(Twist) <= deadband){
			Twist = 0;
	}
	SmartDashboard::PutNumber("Test", 16);
	A = (cos(DirectionRadians)*Magnitude)-(Twist*LENGTH/2);
	B = (cos(DirectionRadians)*Magnitude)+(Twist*LENGTH/2);
	C = (sin(DirectionRadians)*Magnitude)-(Twist*WIDTH/2);
	D = (sin(DirectionRadians)*Magnitude)+(Twist*WIDTH/2);
	SmartDashboard::PutNumber("Test2", 537);
	SmartDashboard::PutNumber("A", A);
	SmartDashboard::PutNumber("B", B);
	SmartDashboard::PutNumber("C", C);
	SmartDashboard::PutNumber("D", D);
	SmartDashboard::PutNumber("Test3", 538);
	
}

float Thing::Sign(float InputSign) {
	if (InputSign > 0) {
		return 1;
	}
	if (InputSign < 0) {
		return -1;
	}
	return 0;
}

void Thing::Setpoint()
{
	OnlyAngle.Enable();
	if (trigger == 1){
		FrontRightAngle.SetSetpoint(500);
	}
	else
		FrontRightAngle.SetSetpoint(150);
}

void Thing::JoystickAngle(float dirictionrad, float mag)
{
	if (fabs(mag) >= .2)
	  drad = dirictionrad+180;
	
}

void Thing::SetAngle()
{
	OnlyAngle.Enable();
	OnlyAngle.Setpoint(((drad)*(RANGE)/360)-MIN);
	if (OnlyAngle.OnTarget())
	{
		OnlyVictor.Set(0);
	}
}
